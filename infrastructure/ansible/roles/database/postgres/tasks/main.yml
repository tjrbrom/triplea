- name: Ensure latest bash and ssl
  apt:
    state: latest
    name:
      - bash
      - openssl
      - libssl-dev
      - libssl-doc

- name: Install PostgreSQL
  apt:
    state: present
    name:
      - postgresql
      - postgresql-contrib
      - libpq-dev
      - python3-psycopg2

- name: Ensure the PostgreSQL service is running
  service:
    name: postgresql
    state: started
    enabled: yes

- name: deploy file /etc/postgresql/12/main/pg_hba.conf
  register: pg_hba
  copy:
    src: pg_hba.conf
    dest: /etc/postgresql/12/main/pg_hba.conf
    owner: postgres
    group: postgres
    mode: "0640"

- name: Reload  PostgreSQL if pg_hba.conf changed
  when: pg_hba.changed
  service:
    name: postgresql
    state: reloaded


- name: Set postgres user password
  become_user: postgres
  postgresql_user:
    name: postgres
    login_password: "{{ postgres_user_db_password }}"
    password: "{{ postgres_user_db_password }}"
    encrypted: yes

- name: Create application database users
  become_user: postgres
  postgresql_user:
    name: "{{ database_user }}"
    password: "{{ database_password }}"
    login_password: "{{ postgres_user_db_password }}"
    encrypted: yes
    state: "present"

- name: Create application databases
  become_user: postgres
  postgresql_db:
    name: "{{ database_name }}"
    owner: "{{ database_user }}"
    login_password: "{{ postgres_user_db_password }}"

- name: Ensure user has access to the database
  become_user: postgres
  postgresql_user:
    db: "{{ database_name }}"
    name: "{{ database_user }}"
    password: "{{ database_password }}"
    login_password: "{{ postgres_user_db_password }}"
    encrypted: yes
    priv: "ALL"
    role_attr_flags: NOSUPERUSER,NOCREATEDB
    state: "present"

# This is a hack because the previous tasks were supposed to set
# the DB level password for our DB user, but it typically does not.
# To achieve this, we'll run the native SQL commands to set the
# user DB password.
- name: set DB user passwords via CLI
  shell: >
    echo "alter role {{ database_user }} with password '{{ database_password }}';"  | psql -U postgres
  environment:
    PGPASSWORD: "{{ postgres_user_db_password }}"
  changed_when: false
  no_log: true
