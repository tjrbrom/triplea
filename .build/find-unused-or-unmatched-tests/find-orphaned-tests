#!/bin/bash

set -u

red="\e[91m"
normal="\e[0m"

testFiles=$(mktemp)
srcFiles=$(mktemp)

trap 'rm $testFiles $srcFiles' EXIT

## Find all test files, excluding:
##  - files in the integration-testing sub-project
##  - files that are suffixed 'IntegrationTest.java'

find . -type f -path "*/src/test/java/*" -name "*Test.java" \
   | grep -v "IntegrationTest.java" > "$testFiles"

## Cache all source files
find . -type f -path "*/src/main/java/*" -name "*.java" > "$srcFiles"

status=0

## Loop through every test file now, check if we find a corresponding source file.
while read -r testFile; do
  # Skip tests with: @SuppressWarning("UnmatchedTest")
  if grep -iqE "@SuppressWarning.*UnmatchedTest" "$testFile"; then continue; fi


  # expected source name is just the expected java class file name
  expectedSourceName=$(echo "$testFile" | sed 's|.*/||' | sed 's|Test.java|.java|')
  if grep -q "/$expectedSourceName$" "$srcFiles"; then
     # now that we have found there exists such a class, determine from the test file
     # the expected package
     expectedSource=$(echo "$testFile" | sed 's|src/test/java|src/main/java|' | sed 's|Test.java|.java|')

     if ! grep -q "$expectedSource" "$srcFiles"; then
       echo -e "${red}Unmatched test files! $testFile ${normal}"
       echo    "Expected: $expectedSource"
       echo -n "   Found: "
       grep "/$expectedSourceName$" "$srcFiles"
       status=1
     fi
  fi

done < "$testFiles"

if [ "$status" -eq 1 ]; then
  echo ""
  echo "You can fix these errors by:"
  echo " - moving the test file into a package to matching the source file under test"
  echo " - adding an @SuppressWarnings(\"UnmatchedTest\") to the test"
fi

exit "$status"
