import net.ltgt.gradle.errorprone.CheckSeverity

plugins {
    id 'java'
    id 'com.github.ben-manes.versions' version '0.33.0'
    id 'io.franzbecker.gradle-lombok' version '4.0.0' apply false
    id 'net.ltgt.errorprone' version '1.2.1' apply false
    id 'com.diffplug.spotless' version '5.6.1' apply false
}

apply from: 'gradle/scripts/yaml.gradle'

description = 'TripleA is a free online turn based strategy game and board game engine, similar to such board games as Axis & Allies or Risk.'

ext {
    schemasDir = file('config/triplea/schemas')
}

check {
    dependsOn 'validateYamls'
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

task validateYamls(group: 'verification', description: 'Validates YAML files.') {
    doLast {
        def lobbyServerYamlFile = file('lobby_server.yaml')
        validateYaml(lobbyServerYamlFile, file("$schemasDir/lobby_server.json"))

        def mapsYamlFile = file('triplea_maps.yaml')
        validateYaml(mapsYamlFile, file("$schemasDir/triplea_maps.json"))
        validateMapsYamlUris(mapsYamlFile)
    }
}

allprojects {
    apply plugin: 'com.diffplug.spotless'

    spotless {
        format 'allFiles', {
            target '*'

            endWithNewline()
            indentWithSpaces()
            trimTrailingWhitespace()
        }
    }
}

subprojects {
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'
    apply plugin: 'java'
    apply plugin: 'pmd'
    apply plugin: 'net.ltgt.errorprone'
    apply plugin: 'io.franzbecker.gradle-lombok'

    apply from: rootProject.file('gradle/scripts/release.gradle')
    apply from: rootProject.file('gradle/scripts/version.gradle')

    group = 'triplea'
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    version = getProductVersion()

    ext {
        awaitilityVersion = '4.0.3'
        bcryptVersion = '0.9.0'
        caffeineVersion = '2.8.1'
        checkstyleVersion = '8.23'
        commonsCliVersion = '1.4'
        commonsCodecVersion = '1.15'
        commonsIoVersion = '2.8.0'
        commonsMathVersion = '3.6.1'
        databaseRiderVersion = '1.7.3'
        dropwizardVersion = '1.3.15'
        dropwizardWebsocketsVersion = '1.3.14'
        equalsVerifierVersion = '3.4.3'
        errorProneVersion = '2.3.4'
        feignCoreVersion = '10.2.3'
        feignGsonVersion = '10.2.0'
        gsonVersion = '2.8.6'
        guavaVersion = '29.0-jre'
        hamcrestJsonVersion = '0.2'
        hamcrestOptionalVersion = '2.0.0'
        hamcrestVersion = '2.0.0.0'
        jacksonDataTypeVersion = '2.11.2'
        jakartaMailVersion = '1.6.5'
        javaWebsocketVersion = '1.5.1'
        javaxActivationVersion = '1.1.1'
        jaxbApiVersion = '2.3.1'
        jaxbCoreVersion = '2.3.0.1'
        jaxbImplVersion = '2.3.3'
        jdbiVersion = '3.14.4'
        jlayerVersion = '1.0.1.4'
        junitJupiterVersion = '5.7.0'
        junitPlatformLauncherVersion = '1.7.0'
        logbackClassicVersion = '1.2.3'
        mockitoVersion = '3.5.13'
        openFeignVersion = '10.5.1'
        postgresqlVersion = '42.2.16'
        rateLimitjVersion = '0.6.0'
        snakeYamlVersion = '2.1'
        sonatypeGoodiesPrefsVersion = '2.3.1'
        substanceVersion = '2.5.1'
        wireMockJunit5Version = '1.3.1'
        wireMockVersion = '2.21.0'
        xchartVersion = '3.6.5'
        xmlUnitCore = '2.7.0'
        xmlUnitMatchers = '2.7.0'
    }

    repositories {
        jcenter()
    }

    dependencies {
        errorprone "com.google.errorprone:error_prone_core:$errorProneVersion"
        implementation "ch.qos.logback:logback-classic:$logbackClassicVersion"
        implementation "com.google.guava:guava:$guavaVersion"
        testImplementation "com.github.npathai:hamcrest-optional:$hamcrestOptionalVersion"
        testImplementation "nl.jqno.equalsverifier:equalsverifier:$equalsVerifierVersion"
        testImplementation "org.hamcrest:java-hamcrest:$hamcrestVersion"
        testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
        testImplementation "org.junit.jupiter:junit-jupiter-params:$junitJupiterVersion"
        testImplementation "org.mockito:mockito-core:$mockitoVersion"
        testImplementation "org.mockito:mockito-junit-jupiter:$mockitoVersion"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
        testRuntimeOnly "org.junit.platform:junit-platform-launcher:$junitPlatformLauncherVersion"
    }

    tasks.withType(JavaCompile).configureEach {
        options.compilerArgs += [
            '-Xlint:all,-processing',
            '-Xmaxwarns', '15'
        ]
        options.encoding = 'UTF-8'
        options.errorprone {
            check 'ByteBufferBackingArray', CheckSeverity.ERROR
            check 'CatchAndPrintStackTrace', CheckSeverity.ERROR
            check 'ClassCanBeStatic', CheckSeverity.ERROR
            check 'DefaultCharset', CheckSeverity.ERROR
            check 'EqualsGetClass', CheckSeverity.ERROR
            check 'EqualsIncompatibleType', CheckSeverity.ERROR
            check 'EqualsUnsafeCast', CheckSeverity.ERROR
            check 'FutureReturnValueIgnored', CheckSeverity.ERROR
            check 'ImmutableEnumChecker', CheckSeverity.ERROR
            check 'InconsistentCapitalization', CheckSeverity.ERROR
            check 'JdkObsolete', CheckSeverity.ERROR
            check 'MissingOverride', CheckSeverity.ERROR
            check 'MutableConstantField', CheckSeverity.ERROR
            check 'NonAtomicVolatileUpdate', CheckSeverity.ERROR
            check 'ObjectToString', CheckSeverity.ERROR
            check 'OperatorPrecedence', CheckSeverity.ERROR
            check 'PrivateConstructorForUtilityClass', CheckSeverity.ERROR
            check 'ReferenceEquality', CheckSeverity.ERROR
            check 'StringSplitter', CheckSeverity.ERROR
            check 'ThreadPriorityCheck', CheckSeverity.ERROR
            check 'UndefinedEquals', CheckSeverity.ERROR
            check 'UnnecessaryParentheses', CheckSeverity.ERROR
            check 'UnsafeReflectiveConstructionCast', CheckSeverity.ERROR
            check 'UnsynchronizedOverridesSynchronized', CheckSeverity.ERROR
            check 'WaitNotInLoop', CheckSeverity.ERROR
            disable 'UnusedVariable' // Workaround for https://github.com/google/error-prone/issues/1250
        }
        options.errorprone.errorproneArgs = ['-Xep:Finally:OFF'] // Workaround for https://github.com/google/error-prone/issues/1257
        options.incremental = true
    }

    tasks.withType(Test).configureEach {
        testLogging {
            exceptionFormat = 'full'
            showStandardStreams = true
        }
    }

    check {
        dependsOn 'integTest'
    }

    checkstyle {
        toolVersion = "$checkstyleVersion"
        configFile = rootProject.file('config/checkstyle/checkstyle.xml')
        configProperties = [samedir: configFile.parent]
    }

    checkstyleMain {
        maxWarnings = 0
        source sourceSets.main.output.resourcesDir
    }

    checkstyleTest {
        maxWarnings = 0
        source sourceSets.test.output.resourcesDir
        exclude '**/map-xmls/*.xml'
    }

    compileTestJava {
        options.errorprone {
            check 'ClassCanBeStatic', CheckSeverity.OFF
        }
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
            xml.destination file("${buildDir}/jacoco.xml")
            html.enabled = true
        }
    }

    lombok {
        version = '1.18.12'
        sha256 = '49381508ecb02b3c173368436ef71b24c0d4418ad260e6cc98becbcf4b345406'
    }

    pmd {
        consoleOutput = true
        ruleSetFiles = files(rootProject.file('config/pmd/pmd.xml'))
        ruleSets = []
        incrementalAnalysis = true
    }

    spotless {
        java {
            googleJavaFormat()
            removeUnusedImports()
        }
    }

    test {
        useJUnitPlatform {
            excludeTags 'integration'
        }
    }

    task integTest(type: Test) {
        useJUnitPlatform {
            includeTags 'integration'
        }
    }
}
