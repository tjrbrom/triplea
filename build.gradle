plugins {
    id 'java'
    id 'com.github.ben-manes.versions' version '0.46.0'
    id 'io.franzbecker.gradle-lombok' version '5.0.0' apply false
    id 'com.diffplug.spotless' version '6.16.0' apply false
}

apply plugin: 'eclipse'

ext {
    schemasDir = file('config/triplea/schemas')
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

allprojects {
    apply plugin: 'com.diffplug.spotless'
    apply plugin: 'java'

    spotless {
        format 'allFiles', {
            target '*'

            endWithNewline()
            indentWithSpaces()
            trimTrailingWhitespace()
        }
    }
}

subprojects {
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'
    apply plugin: 'java'
    apply plugin: 'pmd'
    apply plugin: 'io.franzbecker.gradle-lombok'

    apply from: rootProject.file('gradle/scripts/release.gradle')
    apply from: rootProject.file('gradle/scripts/version.gradle')

    group = 'triplea'
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    ext {
        apacheHttpComponentsVersion = '4.5.14'
        awaitilityVersion = '4.2.0'
        bcryptVersion = '0.10.2'
        caffeineVersion = '3.1.4'
        checkstyleVersion = '8.45'
        commonsCliVersion = '1.5.0'
        commonsCodecVersion = '1.15'
        commonsIoVersion = '2.11.0'
        commonsMathVersion = '3.6.1'
        commonsTextVersion = '1.10.0'
        databaseRiderVersion = '1.36.0'
        dropwizardVersion = '2.1.0'
        dropwizardWebsocketsVersion = '1.3.14'
        equalsVerifierVersion = '3.14'
        feignCoreVersion = '12.2'
        feignGsonVersion = '12.2'
        javaWebSocketVersion = '1.5.3'
        gsonVersion = '2.10.1'
        guavaVersion = '31.1-jre'
        hamcrestJsonVersion = '0.2'
        hamcrestOptionalVersion = '2.0.0'
        hamcrestVersion = '2.0.0.0'
        jacksonDataTypeVersion = '2.14.2'
        jakartaMailVersion = '2.0.1'
        javaWebsocketVersion = '1.5.3'
        javaxActivationVersion = '1.1.1'
        jaxbApiVersion = '2.3.1'
        jaxbCoreVersion = '4.0.2'
        jaxbImplVersion = '4.0.2'
        jdbiVersion = '3.37.1'
        jetbrainsAnnotationsVersion = '24.0.1'
        jlayerVersion = '1.0.1.4'
        junitJupiterVersion = '5.9.2'
        junitPlatformLauncherVersion = '1.9.2'
        logbackClassicVersion = '1.2.11'
        mockitoVersion = '4.11.0'
        openFeignVersion = '12.2'
        postgresqlVersion = '42.5.4'
        snakeYamlVersion = '2.6'
        sonatypeGoodiesPrefsVersion = '2.3.5'
        substanceVersion = '4.5.0'
        wireMockJunit5Version = '1.3.1'
        wireMockVersion = '2.27.2'
        xchartVersion = '3.8.3'
        xmlUnitCore = '2.9.1'
        xmlUnitMatchers = '2.9.1'
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation "ch.qos.logback:logback-classic:$logbackClassicVersion"
        implementation "com.google.guava:guava:$guavaVersion"
        testImplementation "com.github.npathai:hamcrest-optional:$hamcrestOptionalVersion"
        testImplementation "nl.jqno.equalsverifier:equalsverifier:$equalsVerifierVersion"
        testImplementation "org.hamcrest:java-hamcrest:$hamcrestVersion"
        testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
        testImplementation "org.junit.jupiter:junit-jupiter-params:$junitJupiterVersion"
        testImplementation "org.mockito:mockito-core:$mockitoVersion"
        testImplementation "org.mockito:mockito-junit-jupiter:$mockitoVersion"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
        testRuntimeOnly "org.junit.platform:junit-platform-launcher:$junitPlatformLauncherVersion"
    }

    tasks.withType(JavaCompile).configureEach {
        options.compilerArgs += [
            '-Xlint:none,-processing'
        ]
        options.encoding = 'UTF-8'
        options.incremental = true
    }

    tasks.withType(Test).configureEach {
        testLogging {
            exceptionFormat = 'full'
            showStandardStreams = true
        }
    }

    // Add a summary of failed test case to the end of execution
    //   https://stackoverflow.com/questions/43917709/how-do-i-show-a-list-of-all-the-test-failures-after-completion-of-a-gradle-task
    // add a collection to track failedTests
    ext.failedTests = []

    // add a testlistener to all tasks of type Test
    tasks.withType(Test) {
        afterTest { TestDescriptor descriptor, TestResult result ->
            if(result.resultType == TestResult.ResultType.FAILURE){
                failedTests << ["${descriptor.className}::${descriptor.name}"]
            }
        }
    }

    // print out tracked failed tests when the build has finished
    gradle.buildFinished {
        if(!failedTests.empty){
            println "Failed tests for ${project.name}:"
            failedTests.each { failedTest ->
                println failedTest
            }
            println ""
        }
    }

    checkstyle {
        toolVersion = "$checkstyleVersion"
        configFile = rootProject.file('.build/checkstyle.xml')
        configProperties = [samedir: configFile.parent]
    }

    checkstyleMain {
        maxWarnings = 0
        source sourceSets.main.output.resourcesDir
    }

    checkstyleTest {
        maxWarnings = 0
        source sourceSets.test.output.resourcesDir
        exclude '**/map-xmls/*.xml'
    }

    jacocoTestReport {
        reports {
            xml.required = true
            xml.destination file("${buildDir}/jacoco.xml")
            html.required = true
        }
    }

    lombok {
        version = '1.18.20'
        sha256 = 'ce947be6c2fbe759fbbe8ef3b42b6825f814c98c8853f1013f2d9630cedf74b0'
    }

    pmd {
        consoleOutput = true
        ruleSetFiles = files(rootProject.file('.build/pmd.xml'))
        ruleSets = []
        incrementalAnalysis = true
    }

    spotless {
        java {
            googleJavaFormat()
            removeUnusedImports()
        }
    }

    test {
        useJUnitPlatform()
    }
}
