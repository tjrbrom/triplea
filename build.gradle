import net.ltgt.gradle.errorprone.CheckSeverity

plugins {
    id 'java'
    id 'com.github.ben-manes.versions' version '0.38.0'
    id 'io.franzbecker.gradle-lombok' version '4.0.0' apply false
    id 'net.ltgt.errorprone' version '2.0.1' apply false
    id 'com.diffplug.spotless' version '5.12.4' apply false
}

apply from: 'gradle/scripts/yaml.gradle'

description = 'TripleA is a free online turn based strategy game and board game engine, similar to such board games as Axis & Allies or Risk.'

ext {
    schemasDir = file('config/triplea/schemas')
}

check {
    dependsOn 'validateYamls'
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

task validateYamls(group: 'verification', description: 'Validates YAML files.') {
    doLast {
        def lobbyServerYamlFile = file('lobby_server.yaml')
        validateYaml(lobbyServerYamlFile, file("$schemasDir/lobby_server.json"))

        def mapsYamlFile = file('triplea_maps.yaml')
        validateYaml(mapsYamlFile, file("$schemasDir/triplea_maps.json"))
        validateMapsYamlUris(mapsYamlFile)
    }
}

allprojects {
    apply plugin: 'com.diffplug.spotless'

    spotless {
        format 'allFiles', {
            target '*'

            endWithNewline()
            indentWithSpaces()
            trimTrailingWhitespace()
        }
    }
}

subprojects {
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'
    apply plugin: 'java'
    apply plugin: 'pmd'
    apply plugin: 'net.ltgt.errorprone'
    apply plugin: 'io.franzbecker.gradle-lombok'

    apply from: rootProject.file('gradle/scripts/release.gradle')
    apply from: rootProject.file('gradle/scripts/version.gradle')

    group = 'triplea'
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    version = getProductVersion()

    ext {
        apacheHttpComponentsVersion = '4.5.13'
        awaitilityVersion = '4.0.3'
        bcryptVersion = '0.9.0'
        caffeineVersion = '2.8.1'
        checkstyleVersion = '8.23'
        commonsCliVersion = '1.4'
        commonsCodecVersion = '1.15'
        commonsIoVersion = '2.8.0'
        commonsMathVersion = '3.6.1'
        commonsTextVersion = '1.9'
        databaseRiderVersion = '1.7.3'
        dropwizardVersion = '2.0.21'
        dropwizardWebsocketsVersion = '1.3.14'
        equalsVerifierVersion = '3.6'
        errorProneVersion = '2.6.0'
        feignCoreVersion = '11.1'
        feignGsonVersion = '11.1'
        javaWebSocketVersion = '1.5.2'
        gsonVersion = '2.8.6'
        guavaVersion = '30.1.1-jre'
        hamcrestJsonVersion = '0.2'
        hamcrestOptionalVersion = '2.0.0'
        hamcrestVersion = '2.0.0.0'
        jacksonDataTypeVersion = '2.12.3'
        jakartaMailVersion = '2.0.1'
        javaWebsocketVersion = '1.5.2'
        javaxActivationVersion = '1.1.1'
        jaxbApiVersion = '2.3.1'
        jaxbCoreVersion = '3.0.0'
        jaxbImplVersion = '3.0.0'
        jdbiVersion = '3.20.0'
        jlayerVersion = '1.0.1.4'
        junitJupiterVersion = '5.7.1'
        junitPlatformLauncherVersion = '1.7.1'
        logbackClassicVersion = '1.2.3'
        mockitoVersion = '3.9.0'
        openFeignVersion = '11.1'
        postgresqlVersion = '42.2.20'
        snakeYamlVersion = '2.2.1'
        sonatypeGoodiesPrefsVersion = '2.3.2-01'
        substanceVersion = '3.5.1'
        wireMockJunit5Version = '1.3.1'
        wireMockVersion = '2.21.0'
        xchartVersion = '3.8.0'
        xmlUnitCore = '2.8.2'
        xmlUnitMatchers = '2.8.2'
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        errorprone "com.google.errorprone:error_prone_core:$errorProneVersion"
        implementation "ch.qos.logback:logback-classic:$logbackClassicVersion"
        implementation "com.google.guava:guava:$guavaVersion"
        testImplementation "com.github.npathai:hamcrest-optional:$hamcrestOptionalVersion"
        testImplementation "nl.jqno.equalsverifier:equalsverifier:$equalsVerifierVersion"
        testImplementation "org.hamcrest:java-hamcrest:$hamcrestVersion"
        testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
        testImplementation "org.junit.jupiter:junit-jupiter-params:$junitJupiterVersion"
        testImplementation "org.mockito:mockito-core:$mockitoVersion"
        testImplementation "org.mockito:mockito-junit-jupiter:$mockitoVersion"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
        testRuntimeOnly "org.junit.platform:junit-platform-launcher:$junitPlatformLauncherVersion"
    }

    tasks.withType(JavaCompile).configureEach {
        options.compilerArgs += [
            '-Xlint:all,-processing',
            '-Xmaxwarns', '15'
        ]
        options.encoding = 'UTF-8'
        options.errorprone {
            check 'ByteBufferBackingArray', CheckSeverity.ERROR
            check 'CatchAndPrintStackTrace', CheckSeverity.ERROR
            check 'ClassCanBeStatic', CheckSeverity.ERROR
            check 'DefaultCharset', CheckSeverity.ERROR
            check 'EqualsGetClass', CheckSeverity.ERROR
            check 'EqualsIncompatibleType', CheckSeverity.ERROR
            check 'EqualsUnsafeCast', CheckSeverity.ERROR
            check 'FutureReturnValueIgnored', CheckSeverity.ERROR
            check 'ImmutableEnumChecker', CheckSeverity.ERROR
            check 'InconsistentCapitalization', CheckSeverity.ERROR
            check 'JdkObsolete', CheckSeverity.ERROR
            check 'MissingOverride', CheckSeverity.ERROR
            check 'MutableConstantField', CheckSeverity.ERROR
            check 'NonAtomicVolatileUpdate', CheckSeverity.ERROR
            check 'ObjectToString', CheckSeverity.ERROR
            check 'OperatorPrecedence', CheckSeverity.ERROR
            check 'PrivateConstructorForUtilityClass', CheckSeverity.ERROR
            check 'ReferenceEquality', CheckSeverity.ERROR
            check 'StringSplitter', CheckSeverity.ERROR
            check 'ThreadPriorityCheck', CheckSeverity.ERROR
            check 'UndefinedEquals', CheckSeverity.ERROR
            check 'UnnecessaryParentheses', CheckSeverity.ERROR
            check 'UnsafeReflectiveConstructionCast', CheckSeverity.ERROR
            check 'UnsynchronizedOverridesSynchronized', CheckSeverity.ERROR
            check 'WaitNotInLoop', CheckSeverity.ERROR
            disable 'UnusedVariable' // Workaround for https://github.com/google/error-prone/issues/1250
            disable 'SameNameButDifferent' // Workaround for https://github.com/google/error-prone/issues/2120
        }
        options.incremental = true
    }

    tasks.withType(Test).configureEach {
        testLogging {
            exceptionFormat = 'full'
            showStandardStreams = true
        }
    }

    // Add a summary of failed test case to the end of execution
    //   https://stackoverflow.com/questions/43917709/how-do-i-show-a-list-of-all-the-test-failures-after-completion-of-a-gradle-task
    // add a collection to track failedTests
    ext.failedTests = []

    // add a testlistener to all tasks of type Test
    tasks.withType(Test) {
        afterTest { TestDescriptor descriptor, TestResult result ->
            if(result.resultType == org.gradle.api.tasks.testing.TestResult.ResultType.FAILURE){
                failedTests << ["${descriptor.className}::${descriptor.name}"]
            }
        }
    }

    // print out tracked failed tests when the build has finished
    gradle.buildFinished {
        if(!failedTests.empty){
            println "Failed tests for ${project.name}:"
            failedTests.each { failedTest ->
                println failedTest
            }
            println ""
        }
    }

    checkstyle {
        toolVersion = "$checkstyleVersion"
        configFile = rootProject.file('config/checkstyle/checkstyle.xml')
        configProperties = [samedir: configFile.parent]
    }

    checkstyleMain {
        maxWarnings = 0
        source sourceSets.main.output.resourcesDir
    }

    checkstyleTest {
        maxWarnings = 0
        source sourceSets.test.output.resourcesDir
        exclude '**/map-xmls/*.xml'
    }

    compileTestJava {
        options.errorprone {
            check 'ClassCanBeStatic', CheckSeverity.OFF
        }
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
            xml.destination file("${buildDir}/jacoco.xml")
            html.enabled = true
        }
    }

    lombok {
        version = '1.18.20'
        sha256 = 'ce947be6c2fbe759fbbe8ef3b42b6825f814c98c8853f1013f2d9630cedf74b0'
    }

    pmd {
        consoleOutput = true
        ruleSetFiles = files(rootProject.file('config/pmd/pmd.xml'))
        ruleSets = []
        incrementalAnalysis = true
    }

    spotless {
        java {
            googleJavaFormat()
            removeUnusedImports()
        }
    }

    test {
        useJUnitPlatform()
    }
}
