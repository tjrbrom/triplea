package org.triplea.ui.events.queue;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.Is.is;

import java.util.concurrent.atomic.AtomicBoolean;
import java.util.function.UnaryOperator;
import javax.swing.SwingUtilities;

/**
 * Test data consists of: - a view-data class <br>
 * - a view class<br>
 * - a controller class<br>
 * - view events<br>
 * - model events<br>
 * - an event queue class<br>
 */
class ViewControllerEventQueueTestData {

  /**
   * Example view class with a listener set up for model events. If a model event is received then
   * the 'modelEventReceived' flag is flipped to true.
   */
  static class ExampleViewClass
      implements ViewClass<ExampleViewController.ControllerEventSample, ViewDataSample> {
    final AtomicBoolean modelEventReceived = new AtomicBoolean(false);

    /**
     * Example enum reprsenting UI events. The UI event is bound to a handler on our example
     * controller class.
     */
    enum ViewEventSample {
      UI_EVENT;
    }

    @Override
    public void handleEvent(
        final ExampleViewController.ControllerEventSample controllerEventSample,
        final UnaryOperator<ViewDataSample> dataSampleUpdate) {
      modelEventReceived.set(true);
      assertThat(SwingUtilities.isEventDispatchThread(), is(true));
    }

    boolean hasReceivedControllerEvent() {
      return modelEventReceived.get();
    }
  }

  /**
   * Example controller class with a listener set up for UI events. If a UI event is received then
   * the 'uiEventReceived' flag is flipped to true.
   */
  static class ExampleViewController
      implements ViewClassController<ExampleViewClass.ViewEventSample, ViewDataSample> {
    /**
     * Example enum representing model events. The model event is bound to a handler on our example
     * view class.
     */
    enum ControllerEventSample {
      CONTROLLER_EVENT_SAMPLE;
    }

    final AtomicBoolean uiEventReceived = new AtomicBoolean(false);

    @Override
    public void handleEvent(
        final ExampleViewClass.ViewEventSample viewEventSample, final ViewDataSample dataSample) {
      uiEventReceived.set(true);
      assertThat(SwingUtilities.isEventDispatchThread(), is(false));
    }

    boolean hasReceivedUiEvent() {
      return uiEventReceived.get();
    }
  }

  /**
   * Example data class, this is typically generated by the UI by reading the UI controls. In our
   * case the data object is empty.
   */
  static class ViewDataSample implements ViewData {}

  /**
   * Example EventQueue helper class. With 5 generic args the pattern is to create a helper class
   * like this that does nothing other than fll in the generic types.
   */
  static class ExampleEventQueue
      extends ViewControllerSwingEventQueue<
          ExampleViewClass,
          ExampleViewClass.ViewEventSample,
          ViewDataSample,
          ExampleViewController.ControllerEventSample,
          ExampleViewController> {}
}
